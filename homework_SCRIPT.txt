
C:\Skillbox\Basic\Module14\01_os_info\main.py

import platform
import sys

info = 'OS info is \n{}\n\nPython version is {} {}'.format(
    platform.uname(),
    sys.version,
    platform.architecture(),
)
print(info)

with open('os_info.txt', 'w', encoding='utf8') as file:
    file.write(info)

########################################
C:\Skillbox\Basic\Module14\02_session\main.py

print("Введите первую точку")
x1 = float(input('X: '))
y1 = float(input('Y: '))
print("\nВведите вторую точку")
x2 = float(input('X: '))
y2 = float(input('Y: '))

x_diff = x1 - x2
y_diff = y1 - y2
if x_diff == 0:
    x_diff = x1
    print(f'x == {x1}')
elif y_diff == 0:
    y_diff = y1
    print(f'y == {y1}')
else:
    k = y_diff / x_diff
    b = y2 - k * x2
    print("Уравнение прямой, проходящей через эти точки:")
    print("y = ", k, " * x + ", b)
########################################
C:\Skillbox\Basic\Module14\03_sum_and_dif\main.py
def the_sum_of_all_the_digits_in_the_number(summ_number):
    answer_summ_number = 0
    while summ_number != 0:
        result = summ_number % 10
        summ_number //= 10
        answer_summ_number += result
    print(f'Сумма чисел: {answer_summ_number}')
    counts_the_number_of_digits_in_a_number(number, answer_summ_number)


def counts_the_number_of_digits_in_a_number(number_of_digits, answer_summ_number):
    count = 0
    while number_of_digits != 0:
        number_of_digits //= 10
        count += 1
    print(f'Количество цифр: {count}')
    result = answer_summ_number - count
    print(f'Разность суммы и количества цифр: {result}')


number = int(input('Введите число: '))
answer_summ_number = the_sum_of_all_the_digits_in_the_number(number)







########################################
C:\Skillbox\Basic\Module14\04_reverse_num\main.py
def separate_the_number(number):
  temp = str(number)
  order = ''
  number_mantissa = int(number)
  for symbol in temp:
    order += symbol
    if symbol == '.':
      order = ' '
  fliped_number = flip_the_number(number_mantissa, order)
  return fliped_number


def flip_the_number(mantissa, order_number):
  answer_1 = int(str(mantissa)[::-1])
  answer_2 = int(str(order_number)[::-1])
  answer_temp = answer_2
  count = 0
  while answer_temp != 0:
    answer_temp //= 10
    count += 1
  result = answer_1 + (answer_2 / 10 ** count)
  print(f'Число наоборот: {result}')
  return result


one_number = float(input('Введите первое число: '))
two_number = float(input('Введите второе число: '))
answer_one_number = separate_the_number(one_number)
answer_two_number = separate_the_number(two_number)
answer = answer_one_number + answer_two_number
print(f'Cумма:  {answer}')

########################################
C:\Skillbox\Basic\Module14\05_least_divisor\main.py
def find_the_smallest_divisor(num):
    temp = 1
    for iteration in range(1, num + 1):
        if num % iteration == 0:
            temp = iteration
        if temp > 1:
            print(f'Наименьший делитель, отличный от единицы: {temp}')
            break


number = int(input('Введите число: '))
find_the_smallest_divisor(number)

########################################
C:\Skillbox\Basic\Module14\06_coin2\main.py
def check_coordinates(x, y, radius):
    coordinate_x = 0.0
    coordinate_y = 0.0
    if coordinate_x + radius >= x and coordinate_y + radius >= y:
        print('Монетка где-то рядом')
    else:
        print('Монетки в области нет')


number_x = float(input('Введите Х: '))
number_y = float(input('Введите Y: '))
number_radius = float(input('Введите радиус: '))
check_coordinates(number_x, number_y, number_radius)

########################################
C:\Skillbox\Basic\Module14\07_years\main.py
def count_special_dates(one_number, two_number):
    for year in range(one_number, two_number + 1):
        number_one = year // 1000
        number_two = year // 100 % 10
        number_three = year // 10 % 10
        number_four = year % 10
        if number_one == number_two == number_three \
                or number_two == number_three == number_four \
                or number_three == number_four == number_one \
                or number_one == number_two == number_four:
            print(year)


first_number = int(input('Введите первый год: '))
second_number = int(input('Введите второй год: '))
print(f'Года от {first_number} до {second_number} с тремя одинаковыми цифрами:')
count_special_dates(first_number, second_number)

########################################
C:\Skillbox\Basic\Module16\01_scary_code\main.py

count = 0
main_registry = [1, 5, 3]
one_roster = [1, 5, 1, 5]
two_roster = [1, 3, 1, 5, 3, 3]

main_registry.extend(one_roster)
number_five = main_registry.count(5)
print(f'Кол-во цифр 5 при первом объединении: {number_five}')

for i_main_registry in main_registry:
    if i_main_registry == 5:
        main_registry.pop(count)
    count += 1

main_registry.extend(two_roster)
number_three = main_registry.count(3)
print(f'Кол-во цифр 3 при втором объединении: {number_three}')
print(f'Итоговый список: {main_registry}')
########################################
C:\Skillbox\Basic\Module16\02_line\main.py
first_rank = list(range(160, 176 + 1, 2))
second_rank = list(range(162, 180 + 1, 3))

new_rank = []
new_rank.extend(first_rank)
new_rank.extend(second_rank)
new_rank.sort(reverse=False)
print(f'Отсортированный список учеников: {new_rank}')


########################################
C:\Skillbox\Basic\Module16\03_details\main.py
shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300],
        ['педаль', 100], ['седло', 1500], ['рама', 12000],
        ['обод', 2000], ['шатун', 200], ['седло', 2700]]

summ_details = 0
part_search = input('Название детали: ')
count_details = 0

for i_shop in shop:
    if i_shop[0] == part_search:
        count_details += 1
        summ_details += i_shop[1]

print(f'Кол-во деталей — {count_details}')
print(f'Общая стоимость — {summ_details}')


########################################
C:\Skillbox\Basic\Module16\04_party\main.py
guests = ['Петя', 'Ваня', 'Саша', 'Лиза', 'Катя', 'Наташа']

while True:
    print(f'Сейчас на вечеринке {len(guests)} человек: {guests}')
    print('Гость пришёл или ушёл?')
    action = input('')
    if action == 'пришёл':
        name_new_guest = input('Имя гостя: ')
        if len(guests) < 6:
            guests.append(name_new_guest)
            print(f'Привет, {name_new_guest}!')
        else:
            print(f'Прости, {name_new_guest}, но мест нет.')
    if action == 'ушёл':
        name_guest = input('Имя гостя: ')
        if name_guest not in guests:
            print('Такого гостя нет!')
        else:
            guests.remove(name_guest)
            print(f'Пока, {name_guest}')
    if action == 'Пора спать':
        print('Вечеринка закончилась, все легли спать.')
        break

########################################
C:\Skillbox\Basic\Module16\05_songs\main.py
violator_songs = [
    ['World in My Eyes', 4.86],
    ['Sweetest Perfection', 4.43],
    ['Personal Jesus', 4.56],
    ['Halo', 4.9],
    ['Waiting for the Night', 6.07],
    ['Enjoy the Silence', 4.20],
    ['Policy of Truth', 4.76],
    ['Blue Dress', 4.29],
    ['Clean', 5.83]
]

time_song = 0
number_of_songs = int(input('Введите кол-во песен: '))
for number in range(1, number_of_songs + 1):
    print(f'Название {number}-й песни: ')
    song = input('')
    for i_song in violator_songs:
        if i_song[0] == song:
            time_song += i_song[1]

time_song = (round(time_song, 2))
print(f'Общее время звучания песен: {time_song} минуты')


########################################
C:\Skillbox\Basic\Module16\06_unique_elems\main.py
first_numbers = []
second_numbers = []
new_roster = []
index = 0
for i_number in range(1, 4):
    number_one = int(input(f'Введите {i_number}-е число для первого списка: '))
    first_numbers.append(number_one)

for i_number in range(1, 8):
    number_two = int(input(f'Введите {i_number}-е число для первого списка: '))
    second_numbers.append(number_two)

print(f'Первый список {first_numbers}')
print(f'Второй список {second_numbers}')

new_roster.extend(first_numbers)
new_roster.extend(second_numbers)

for number in first_numbers:
    copy = new_roster.count(number)
    for _ in range(copy - 1):
        new_roster.remove(first_numbers[index])
    index += 1

print(f'Новый первый список с уникальными элементами: {new_roster}')

########################################
C:\Skillbox\Basic\Module16\07_roller_skates\main.py
number_of_skates = int(input('Кол-во коньков: '))
skates = []
for couple in range(number_of_skates):
    pair_size = int(input(f'Размер {couple + 1}-й пары: '))
    skates.append(pair_size)

number_of_people = int(input('Кол-во людей: '))
foot_sizes = []
for people in range(number_of_people):
    size = int(input(f'Размер ноги {people + 1}-го человека: '))
    foot_sizes.append(size)

skates.sort(reverse=True)
foot_sizes.sort(reverse=True)
for i_foot in foot_sizes:
    for i_skates in skates:
        if i_skates >= i_foot:
            skates.remove(i_skates)

print(f'Наибольшее кол-во людей, которые могут взять ролики: {number_of_people - len(skates)}')

########################################
C:\Skillbox\Basic\Module16\08_rhyme_cnt\main.py
number_of_people = int(input('Введите кол-во людей: '))
count_people = int(input('Какое число в считалке? '))
roster_people = list(range(1, number_of_people + 1))

print(f'Значит, выбывает каждый {count_people}-й человек')

while len(roster_people) != 1:
    print(f'Текущий круг людей: {roster_people}')
    start_num = int(input(f'Начало счёта с номера '))
    start_index = roster_people.index(start_num)
    answer = roster_people[(count_people + start_index - 1) % len(roster_people)]
    print(f'Выбывает человек под номером {answer}')
    roster_people.remove(answer)
    print(' ')

print(f'Остался человек под номером {roster_people[0]}')


########################################
C:\Skillbox\Basic\Module16\09_friends\main.py
number_of_friends = int(input('Кол-во друзей: '))
debt_receipts = int(input('Долговых расписок: '))
friend_summ = []


for i in range(1, number_of_friends + 1):
    friend_summ.append(i)
    summ = friend_summ.index(i)
    friend_summ.insert(summ + 1, 0)


for i_debt in range(debt_receipts):
    print(f'{i_debt + 1}-я расписка')
    whom = int(input('Кому? '))
    from_whom = int(input('От кого? '))
    if whom == from_whom:
        print('Ты не можешь взять в долг сам у себя')
        break
    how_many = int(input('Сколько? '))
    index_debt = friend_summ.index(whom)
    friend_summ[index_debt + 1] -= how_many
    index_beneficiary = friend_summ.index(from_whom)
    friend_summ[index_beneficiary + 1] += how_many

print('Баланс друзей: ')
count = 1
for i_many in range(1, len(friend_summ) + 1, 2):
    print(f'{count}: {friend_summ[i_many]}')
    count += 1

########################################
C:\Skillbox\Basic\Module16\10_simmetrical_seq\main.py
numbers = int(input('Кол-во чисел: '))
roster = []
new_roster = []
for _ in range(numbers):
    number = int(input('Введите число: '))
    roster.append(number)
if roster == roster[::-1]:
    print('Цифры симметричны')
if roster != roster[::-1]:
    if roster[-1] == roster[-2]:
        for i in range(len(roster), 2, -1):
            new_roster.append(roster[-i])
    else:
        for i in range(len(roster), 1, -1):
            new_roster.append(roster[-i])
    print(f'Последовательность {roster}')
    print(f'Нужно приписать чисел: {len(new_roster)}')
    print(f'Сами числа: {new_roster[::-1]}')


########################################
C:\Skillbox\Basic\Module17\01_vowels\main.py
text = input('Enter the text: ')
vowel_letters = 'ёйуеыаоэяию'

new_roster_vowel_letters = [letter for letter in text
                            for symbol in vowel_letters
                            if letter == symbol]

print(f'roster vowel letters: {new_roster_vowel_letters}')
print(f'roster length: {len(new_roster_vowel_letters)}')


########################################
C:\Skillbox\Basic\Module17\02_generation\main.py
import random
number = int(input('Enter the number: '))
answer = [random.randint(1, 20) for random_number in range(number)]
new_answer = [1 if x % 2 == 0 else answer[x] % 5 for x in range(len(answer))]

print('Result: ', answer)
print('New Result: ', new_answer)




########################################
C:\Skillbox\Basic\Module17\03_random_competition\main.py
import random

first_command = [round(random.uniform(5, 10), 2) for _ in range(20)]
second_command = [round(random.uniform(5, 10), 2) for _ in range(20)]

winners = [first_command[index]
           if first_command[index] > second_command[index]
           else second_command[index]
           for index in range(20)]

print(f'first command: {first_command}')
print(f'second command: {second_command}')
print(f'Tour Winners:{winners}')

########################################
C:\Skillbox\Basic\Module17\04_slices\main.py
alphabet = 'abcdefg'

print(f'1: {alphabet[:]}')
print(f'2: {alphabet[::-1]}')
print(f'3: {alphabet[::2]}')
print(f'4: {alphabet[1::2]}')
print(f'5: {alphabet[:1]}')
print(f'6: {alphabet[6:]}')
print(f'7: {alphabet[3:4]}')
print(f'8: {alphabet[4:]}')
print(f'9: {alphabet[3:5]}')
print(f'10: {alphabet[-3:-5:-1]}')



########################################
C:\Skillbox\Basic\Module17\05_reversal\main.py
text = input('Введите текст: ')
letter = input('Введите букву: ')
text_index = []
count = 0

count_letter = text.count(letter)
first_index = list(text).index(letter) + 1

if count_letter >= 2:
    for symbol in text:
        if symbol == letter:
            text_index.append(count)
        count += 1
    text = text[first_index:text_index[1]]
    print(f'Развёрнутая последовательность между первым и последним {letter} : {text[::-1]}')
else:
    print('Буква должна встречаться минимум - 2 раза')

########################################
C:\Skillbox\Basic\Module17\06_list_compression\main.py
import random
number = int(input('Количество чисел в списке:  '))
roster_numbers = [random.randint(0, 2) for _ in range(number)]
print(f'Список до сжатия: {roster_numbers}')

num_one = [num for num in roster_numbers if num > 0]
print(f'Список после сжатия: {num_one}')


# num_nol = [num for num in roster_numbers if num == 0]
# num_one.extend(num_nol)
# print(f'Отсортированный список: {num_one}')

########################################
C:\Skillbox\Basic\Module17\07_two_dimensional_list\main.py
print([[number, number + 4, number + 8] for number in range(1, 5)])


########################################
C:\Skillbox\Basic\Module17\08_entertainment\main.py
import random

number_of_sticks = int(input('Количество палок: '))
sticks = ['|' for _ in range(number_of_sticks)]
number_of_throws = int(input('Количество бросков: '))
initial_number = 1

for cast in range(number_of_throws):
    left_border = random.randint(initial_number, number_of_sticks)
    right_border = random.randint(left_border, number_of_sticks)
    difference = right_border + 1 - left_border
    sticks[left_border - 1: right_border] = '.' * difference
    if right_border < number_of_sticks:
        initial_number = right_border
    elif right_border == number_of_sticks:
        initial_number = 1
        left_border = right_border
    print(f'Бросок {cast + 1}. Сбиты палки с номера {left_border} по номер {right_border}.')

print(f'Результат: {sticks}')









########################################
C:\Skillbox\Basic\Module17\09_list_of_lists_2\main.py
roster = [
    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
    [[10, 11, 12], [13, 14, 15], [16, 17, 18]]
          ]
answer = [number for half in roster
          for fraction in half
          for number in fraction]
print(answer)


########################################
C:\Skillbox\Basic\Module17\10_caesar_cipher\main.py
alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
alphabet = list(alphabet)
new_text = []
text = input('Введите сообщение: ')
shift = int(input('Введите сдвиг: '))

for symbol in text:
    if symbol not in list(alphabet):
        new_text.append(symbol)
        continue
    index = alphabet.index(symbol)
    index_symbol = index + shift
    if index_symbol >= 32:
        index_symbol = 32 - index_symbol + 1
        new_symbol = alphabet[index_symbol]
        new_text.append(new_symbol)
    else:
        new_symbol = alphabet[index_symbol]
        new_text.append(new_symbol)

result = ''.join(new_text)
print(result)


########################################
C:\Skillbox\Basic\Module18\01_restaurant_menu\main.py
menu = input('Доступное меню: ').split(';')
new_menu = ', '.join(menu)
print(f'На данный момент в меню есть: {new_menu}')

########################################
C:\Skillbox\Basic\Module18\02_longest_word\main.py
word = input('Введите строку: ').split()
number_of_letters = 1
long_word = ''
for text in word:
    if number_of_letters <= len(text):
        number_of_letters = len(text)
        long_word = text

print(f'Самое длинное слово: {long_word}')
print(f'Длина этого слова: {len(long_word)}')
########################################
C:\Skillbox\Basic\Module18\03_files\main.py
name_file = input('Название файла: ')
bad_symbol = '@  №  $  %  ^  &  *  ( )'.split()
begin_word = True
for symbol in bad_symbol:
    if name_file.startswith(symbol):
        begin_word = False
        print('Ошибка: название начинается на один из специальных символов.')

if name_file.endswith('.txt') or name_file.endswith('.docx') and begin_word:
    print('Файл назван верно.')
else:
    print('Ошибка: неверное расширение файла. Ожидалось .txt или .docx.')

########################################
C:\Skillbox\Basic\Module18\04_capital_letters\main.py
text = input('Введите строку: ').split()
result = [word.title() for word in text]
result = ' '.join(result)
print(f'Результат: {result}')

########################################
C:\Skillbox\Basic\Module18\05_password\main.py
while True:
    password = input('Придумайте пароль: ')
    digits_in_the_password = len([number for number in password if number.isdigit()])
    if len(password) > 8 and password.islower() != True and digits_in_the_password >= 3:
        print('Это надёжный пароль!')
        break
    else:
        print('Пароль ненадёжный. Попробуйте ещё раз.')

########################################
C:\Skillbox\Basic\Module18\06_compression\main.py
text = input('Введите строку: ')
text = [letter for letter in text]
copy_text = text[:]
copy_text += '!'
index = -1
roster_letters = []
result_letters = []
answer = []
result = []

for letter in text:
    roster_letters.append(letter)
    index += 1
    if copy_text[index] != copy_text[index + 1]:
        result_letters.append(roster_letters)
        roster_letters = []

for letter in result_letters:
    str_letter = letter[0]
    count_letter = str(len(letter))
    answer = str_letter + count_letter
    result += answer
    result = ''.join(result)

print(f'Закодированная строка: {result}')

########################################
C:\Skillbox\Basic\Module18\07_ip_adress_2\main.py
ip_address = input('Введите IP: ')
dot = ip_address.count('.')
answer = False
if dot == 3:
    for number in ip_address.split('.'):
        if not number.isdigit():
            print(f'{number} — это не целое число.')
            break
        if int(number) > 255:
            print(f'{number} превышает 255.')
            break
        if int(number) < 0:
            print(f'{number} меньше 0.')
            break
        if number.isdigit():
            answer = True
else:
    print('Адрес — это четыре числа, разделённые точками.')

if answer:
    print('IP-адрес корректен.')

########################################
C:\Skillbox\Basic\Module18\08_ticker\main.py
first_line = input('Первая строка: ')
second_line = input('Вторая строка: ')
count_letter = len(first_line)
shift = 0

first_roster = [letter for letter in first_line]
second_roster = [letter for letter in second_line]

while count_letter != 0:
    shift += 1
    letter = second_roster[len(second_roster) - 1]
    copy_letter = letter
    second_roster.remove(letter)
    second_roster.insert(0, copy_letter)
    count_letter -= 1
    if second_roster == first_roster:
        print(f'Первая строка получается из второй со сдвигом {shift}.')
        break
    if count_letter == 0:
        print('Первую строку нельзя получить из второй с помощью циклического сдвига.')

########################################
C:\Skillbox\Basic\Module18\09_message\main.py
text = input('Сообщение: ').split()
new_text = []
for word in text:
    if not word.isalpha():
        symbol = word[len(word) - 1]
        copy_symbol = symbol
        temp_word = [letter for letter in word]
        temp_word.remove(symbol)
        temp_word = temp_word[::-1]
        temp_word.insert(len(word) - 1, copy_symbol)
        word = ''.join(temp_word)
        new_text.append(word)
    else:
        new_text.append(word[::-1])

answer = ' '.join(new_text)
print(f'Новое сообщение: {answer}')

########################################
C:\Skillbox\Basic\Module18\10_the_truth\main.py
def shift_in_alphabet(shift_text, code_line):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    alphabet = list(alphabet)
    new_text = []
    for symbol in code_line.lower():
        if symbol not in alphabet:
            new_text.append(symbol)
            continue
        index = alphabet.index(symbol)
        index_symbol = index - shift_text  # (- на расшифровку, + на закодирование)
        if index_symbol >= 25:
            index_symbol -= 26
            new_symbol = alphabet[index_symbol]
            new_text.append(new_symbol)
        else:
            new_symbol = alphabet[index_symbol]
            new_text.append(new_symbol)
    return new_text


def line_shift(new_text):
    result = ''.join(new_text)
    word_shift = 3  # сдвиг в слове
    symbol = '/'
    answer = []
    flag = False
    for word in result.split():
        for _ in range(word_shift):
            letter = word[len(word) - 1]
            copy_word = list(word)
            copy_word.pop(len(word) - 1)
            copy_word.insert(0, letter)
            word = ''.join(copy_word)
            if symbol in list(word):
                word = list(word)
                word.remove('/')
                word_shift += 1
                result = ' '.join(answer)
                flag = True
        if flag:
            word += '.'
            flag = False
        answer.append(word)
    return result


text = 'vujgvmCfb tj ufscfu ouib z/vhm jdjuFyqm jt fscfuu uibo jdju/' \
       'jnqm fTjnqm tj scfuuf ibou fy/dpnqm yDpnqmf jt cfuufs boui dbufe/' \
       'dpnqmj uGmb tj fuufsc ouib oftufe/ bstfTq jt uufscf uibo otf/' \
       'ef uzSfbebcjmj vout/dp djbmTqf dbtft (ubsfo djbmtqf hifopv up csfbl ifu t/' \
       'svmf ipvhiBmu zqsbdujdbmju fbutc uz/' \
       'qvsj Fsspst tipvme wfsof qbtt foumz/' \
       'tjm omfttV mjdjumzfyq odfe/' \
       'tjmf Jo fui dfgb pg hvjuz-bncj gvtfsf fui ubujpoufnq up ftt/' \
       'hv Uifsf vmetip fc pof.. boe sbcmzqsfgf zpom pof pvt..pcwj xbz pu pe ju/' \
       ' Bmuipvhi uibu bzx bzn puo cf wjpvtpc bu jstug ttvomf sfzpv( i/' \
       'Evud xOp tj scfuuf ibou /ofwfs uipvhiBm fsofw jt fopgu cfuufs boui iu++sjh x/' \
       'op gJ ifu nfoubujpojnqmf tj eibs pu mbjo-fyq tju( b bec /' \
       'jefb Jg fui foubujpojnqmfn jt fbtz up bjo-fyqm ju znb cf b hppe jefb/' \
       ' bnftqbdftO bsf pof ipoljoh sfbuh efbj .. fu(tm pe psfn gp tf"uip'
print('Введите ниже: 1')
shift = int(input('Введите сдвиг в алфавите: '))  # 1 Вводим
new_roster = shift_in_alphabet(shift, text)
print(line_shift(new_roster))

########################################
C:\Skillbox\Basic\Module19\01_songs_2\main.py
violator_songs = {
    'World in My Eyes': 4.86,
    'Sweetest Perfection': 4.43,
    'Personal Jesus': 4.56,
    'Halo': 4.9,
    'Waiting for the Night': 6.07,
    'Enjoy the Silence': 4.20,
    'Policy of Truth': 4.76,
    'Blue Dress': 4.29,
    'Clean': 5.83
}

number_text = {
    1: 'первой',
    2: 'второй',
    3: 'третьей',
    4: 'четвертой',
    5: 'пятой',
    6: 'шестой',
    7: 'седьмой'
}
answer = 0
number_of_songs = int(input('Сколько песен выбрать? '))
for number in range(1, number_of_songs + 1):
    song = input(f'Название {number_text[number]} песни: ')
    answer += violator_songs[song]

print(f'Общее время звучания песен: {answer} минуты')

########################################
C:\Skillbox\Basic\Module19\02_geography\main.py
number_text = {
    0: 'Первая',
    1: 'Вторая',
    2: 'Третья',
    3: 'Четвертая',
    4: 'Пятая',
}
number_text_2 = {
    0: 'Первый',
    1: 'Второй',
    2: 'Третий',
}

roster_city = {}
number_of_countries = int(input('Количество стран: '))
for number in range(number_of_countries):
    country = input(f'{number_text[number]} страна: ').split()
    for city in country[1:]:
        roster_city[city] = country[0]

for number in range(3):
    search_city = input(f'{number_text_2[number]} город: ')
    country = roster_city.get(search_city)
    if country:
        print(f'Город {search_city} расположен в стране {country}.')
    else:
        print(f'По городу {search_city} данных нет.')

########################################
C:\Skillbox\Basic\Module19\03_cryptocurrency\main.py
data = {
    "address": "0x544444444444",
    "ETH": {
        "balance": 444,
        "total_in": 444,
        "total_out": 4
    },
    "count_txs": 2,
    "tokens": [
        {
            "fst_token_info": {
                "address": "0x44444",
                "name": "fdf",
                "decimals": 0,
                "symbol": "dsfdsf",
                "total_supply": "3228562189",
                "owner": "0x44444",
                "last_updated": 1519022607901,
                "issuances_count": 0,
                "holders_count": 137528,
                "price": False
            },
            "balance": 5000,
            "totalIn": 0,
            "total_out": 0
        },
        {
            "sec_token_info": {
                "address": "0x44444",
                "name": "ggg",
                "decimals": "2",
                "symbol": "fff",
                "total_supply": "250000000000",
                "owner": "0x44444",
                "last_updated": 1520452201,
                "issuances_count": 0,
                "holders_count": 20707,
                "price": False
            },
            "balance": 500,
            "totalIn": 0,
            "total_out": 0
        }
    ]
}

# Вывести списки ключей и значений словаря.
# В “ETH” добавить ключ “total_diff” со значением 100.
# Внутри “fst_token_info” значение ключа “name” поменять с “fdf” на “doge”.
# Удалить “total_out” из tokens и присвоить его значение в “total_out” внутри “ETH”.
# Внутри "sec_token_info" изменить название ключа “price” на “total_price”.

# 1
for key, value in data.items():
    print(f'{key} = Ключ', end='\n')
    print(f'{value} = Значение', end='\n')
# 2
data['ETH']['total_diff'] = 100
# 3
data['tokens'][0]['fst_token_info']['name'] = 'doge'
# 4
meaning = data['tokens'][0].pop('total_out')
data['tokens'][1].pop('total_out')
data['ETH']['totalOut'] = meaning
# 5
data["tokens"][1]["sec_token_info"]["total_price"] =\
    data["tokens"][1]["sec_token_info"]["price"]
del data["tokens"][1]["sec_token_info"]["price"]

########################################
C:\Skillbox\Basic\Module19\04_goods\main.py
goods = {
    'Лампа': '12345',
    'Стол': '23456',
    'Диван': '34567',
    'Стул': '45678',
}

store = {
    '12345': [
        {'quantity': 27, 'price': 42},
    ],
    '23456': [
        {'quantity': 22, 'price': 510},
        {'quantity': 32, 'price': 520},
    ],
    '34567': [
        {'quantity': 2, 'price': 1200},
        {'quantity': 1, 'price': 1150},
    ],
    '45678': [
        {'quantity': 50, 'price': 100},
        {'quantity': 12, 'price': 95},
        {'quantity': 43, 'price': 97},
    ],
}

for key_number, value in goods.items():
    price = 0
    data = {}
    quantity = 0
    for key in store[value]:
        data = key['quantity'] * key['price']
        number = key['quantity']
        quantity += number
        price += data
    print(f'{key_number} - {quantity} штук, стоимость {price} руб.')

########################################
C:\Skillbox\Basic\Module19\05_frequency_hist_2\main.py
text = input('Введите текст: ').lower()
result = dict()
data = {}

for symbol in text:
    if symbol in result:
        result[symbol] += 1
    else:
        result[symbol] = 1

for i in sorted(result.keys()):
    data[i] = result[i]

for key, value in data.items():
    print(f'{key}:{value}')

one_symbol = {symbol for symbol in data.keys() if data[symbol] == 1}

two_symbol = {symbol for symbol in data.keys() if data[symbol] == 2}
three_symbol = {symbol for symbol in data.keys() if data[symbol] == 3}
print(f'\nИнвертированный словарь частот: \n{one_symbol} \n{two_symbol} \n{three_symbol}')


#Не стал ставить скобки, от списков (так как ПР - на словари)
########################################
C:\Skillbox\Basic\Module19\06_synonym_dict\main.py
line_number = {
    1: 'первая',
    2: 'вторая',
    3: 'третья'
}
data_pairs = {}
number_of_pairs = int(input('Введите количество пар слов: '))
for pairs in range(number_of_pairs):
    data = input(f'{line_number[pairs + 1]} пара: ').split()
    data.remove('-')
    data_pairs[data[0]] = data[1]

flag = True
while flag:
    word = input('Введите слово: ').title()
    for key, value in data_pairs.items():
        if key in word:
            print(f'Cиноним: {value}')
            flag = False
            break
        if value in word:
            print(f'Cиноним: {key}')
            flag = False
            break
    else:
        print('Такого слова в словаре нет.')

########################################
C:\Skillbox\Basic\Module19\07_pizza\main.py
number_of_orders = int(input('Введите количество заказов: '))
number_text = {
    1: 'Первый',
    2: 'Второй',
    3: 'Третий',
    4: 'Четвертый',
    5: 'Пятый',
    6: 'Шестой'
}
roster = {}
for number_order in range(number_of_orders):
    order = input(f'{number_text[number_order + 1]} заказ: ').split()
    flag = True
    if order[0] in roster:
        for key_surname, value_pizza in roster.items():
            if order[1] in value_pizza and order[0] == key_surname:
                for num in value_pizza.values():
                    summ_pizza = int(num) + int(order[2])
                    roster[order[0]].update({order[1]: summ_pizza})
                    flag = False
                    break
            else:
                if flag:
                    roster[order[0]].update({order[1]: order[2]})
                    break
    else:
        roster[order[0]] = {order[1]: order[2]}

for surname, order_value in sorted(roster.items()):
    print(surname)
    for pizza, number in sorted(order_value.items()):
        print(f'     {pizza}: {number}')

########################################
C:\Skillbox\Basic\Module19\08_guess_number\main.py
import random
max_number = int(input('Введите максимальное число: '))
intended_number_artem = random.randint(1, max_number)
print(f'--Задуманное число Артема-- {intended_number_artem}')

data_false = set()
data_true = set()
while True:
    option = input('Нужное число есть среди вот этих чисел: ').lower().split(' ')
    if option == ['помогите!']:
        data_true.difference_update(data_false)
        print(f'Артём мог загадать следующие числа: {data_true}')
        break
    if str(intended_number_artem) in option:
        data_true = {symbol for symbol in option}
        print('Ответ Артёма: Да', data_true)
    if str(intended_number_artem) not in option:
        data_false = {symbol for symbol in option}
        print('Ответ Артёма: Нет')

########################################
C:\Skillbox\Basic\Module19\09_pedigree\main.py
couple = {
    1: 'Первая пара',
    2: 'Вторая пара',
    3: 'Третья пара',
    4: 'Четвертая пара',
    5: 'Пятая пара',
    6: 'Шестая пара',
    7: 'Седьмая пара',
    8: 'Восьмая пара',
}
number_people = int(input('Введите количество человек: '))
family_roster = {}
heir_and_parent = {}
roster = dict()
for number in range(1, number_people):
    heir_and_parent = input(f'{couple[number]}: ').split(' ')
    flag = True
    for parent, generation in family_roster.items():
        if parent == heir_and_parent[1] and parent != 'Peter_I':
            roster = {heir_and_parent[0]: generation + 1}
            family_roster.update(roster)
            flag = False
            break
    if flag:
        roster = {heir_and_parent[0]: 1, heir_and_parent[1]: 0}
        family_roster.update(roster)


for parent, generation in sorted(family_roster.items()):
    print(parent, generation)


# Первая пара: Alexei Peter_I
# Вторая пара: Anna Peter_I
# Третья пара: Elizabeth Peter_I
# Четвёртая пара: Peter_II Alexei
# Пятая пара: Peter_III Anna
# Шестая пара: Paul_I Peter_III
# Седьмая пара: Alexander_I Paul_I
# Восьмая пара: Nicholaus_I Paul_I

########################################
C:\Skillbox\Basic\Module19\10_palindrome_again\main.py
def get_input_parameters():
    text = input('Введите строку: ')
    return text


def display_result(text_palindrome):
    if text_palindrome:
        print('Можно сделать палиндромом')
    else:
        print('Нельзя сделать палиндромом')


def check_palindrome(old_word):
    temp_old_word = list(old_word)
    for _ in range(len(temp_old_word)):
        letter = temp_old_word.pop()
        temp_old_word.insert(0, letter)
        word_palindrome = temp_old_word[::-1]
        if word_palindrome == temp_old_word:
            word_palindrome = True
            return word_palindrome


if __name__ == '__main__':
    word = get_input_parameters()  # получаем параметры
    is_palindrome = check_palindrome(word)  # является ли слово палиндромом.
    display_result(is_palindrome)  # выводим результат

########################################
C:\Skillbox\Basic\Module20\01_code_review\main.py
students = {
    1: {
        'name': 'Bob',
        'surname': 'Vazovski',
        'age': 23,
        'interests': ['biology, swimming']
    },
    2: {
        'name': 'Rob',
        'surname': 'Stepanov',
        'age': 24,
        'interests': ['math', 'computer games', 'running']
    },
    3: {
        'name': 'Alexander',
        'surname': 'Krug',
        'age': 22,
        'interests': ['languages', 'health food']
    }
}


def writes_out_interests(roster_students):
    new_roster_interests = []
    surnames = ''
    for student_id in roster_students:
        surnames += roster_students[student_id]['surname']
        new_roster_interests += (roster_students[student_id]['interests'])
    count_letter = len(surnames)
    new_roster_interests = set(new_roster_interests)
    return count_letter, new_roster_interests


pairs = []
for id_student in students:
    pairs.append((id_student, students[id_student]['age']))

the_number_of_letters_in_the_surname = writes_out_interests(students)[0]
new_roster = writes_out_interests(students)[1]

print(f'Список пар "ID студента — возраст": {pairs}')
print(f'Полный список интересов всех студентов: {new_roster}')
print(f'Общая длина всех фамилий студентов: {the_number_of_letters_in_the_surname}')

########################################
C:\Skillbox\Basic\Module20\02_universal_prog_2\main.py
def data_processing(entering):
    return [symbol for prime_numbers, symbol in enumerate(entering)
            if prime_numbers in filters_for_prime_numbers(entering)]


def filters_for_prime_numbers(enter):
    number_of_characters = len(enter)
    index_letters = []
    for digit_letters in range(2, number_of_characters):
        for number_index in index_letters:
            if digit_letters % number_index == 0:
                break
        else:
            index_letters.append(digit_letters)
    return index_letters


print(data_processing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(data_processing((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
print(data_processing('О Дивный Новый мир!'))

########################################
C:\Skillbox\Basic\Module20\03_function\main.py
def slicer(number, number_2):
    answer = tuple()
    count = 0
    for num in number:
        if num == number_2:
            count += 1
        if 1 == count:
            answer += (num,)
        if count == 2:
            answer += (num,)
            break
    print(answer)


print(slicer((1, 2, 3, 4, 5, 6, 7, 8, 2, 2, 9, 10), 2))

########################################
C:\Skillbox\Basic\Module20\04_players\main.py
players = {
    ("Ivan", "Volkin"): (10, 5, 13),
    ("Bob", "Robbin"): (7, 5, 14),
    ("Rob", "Bobbin"): (12, 8, 2)
}

roster = [(key + value) for key, value in players.items()]
print(roster)
########################################
C:\Skillbox\Basic\Module20\05_one_family\main.py
family = {
    ("Быков", "Павел"): 50,
    ("Быкова", "Ирина"): 38,
    ("Быков", "Игорь"): 71,
    ("Фролова", "Оксана"): 48,
    ("Иванова", "Наталья"): 84
}

surname = input('Введите фамилию: ').title()
for human, age in family.items():
    surname = surname + 'а'
    if surname.startswith(human):
        print(f'{human[0]} {human[1]} {age}')

########################################
C:\Skillbox\Basic\Module20\06_pairs\main.py
import random

roster = [random.randint(0, 10) for _ in range(10)]
print(f'Оригинальный список: {roster}')

new_roster = [(roster[index - 1], number) for index, number in enumerate(roster) if index % 2 == 1]
print(f'Новый список (1): {new_roster}')

new_roster_2 = [(roster[number], roster[number + 1]) for number in range(0, len(roster), 2)]
print(f'Новый список (2): {new_roster_2}')
########################################
C:\Skillbox\Basic\Module20\07_sort_function\main.py
def sorts_the_tuple(numbers):
    answer = tuple()
    flag = False
    for number in numbers:
        if type(number) == int:
            answer = sorted(numbers)
            flag = True
        else:
            return numbers
    if flag:
        answer = tuple(answer)
        return answer


print(sorts_the_tuple((6, 3, -1, 8, 4, 10, -5)))

########################################
C:\Skillbox\Basic\Module20\08_contacts_3\main.py
def displays_the_main_menu():
    print(
        'Введите номер действия: \
       \n1. Добавить контакт\
       \n2. Найти человека '
    )
    action_number = int(input())
    if action_number == 1:
        adds_a_contact()
    if action_number == 2:
        finds_a_person()


def adds_a_contact():
    sur_name = input('Введите имя и фамилию нового контакта (через пробел): ').title().split()
    surname, name = sur_name
    if (surname, name) in roster:
        print('Такой человек уже есть в контактах.')
    else:
        number_phone = int(input('Введите номер телефона: '))
        roster[(surname, name)] = number_phone
    print(f'Текущий словарь контактов: {roster}')
    displays_the_main_menu()


def finds_a_person():
    search_surname = input('Введите фамилию для поиска: ').title()
    for surname, number_phone in roster.items():
        if search_surname == surname[1]:
            print(f'{surname[0]} {surname[1]} {number_phone}')
            break
    else:
        print('Такого человека у нас нет')
        displays_the_main_menu()


roster = {}
displays_the_main_menu()
########################################
C:\Skillbox\Basic\Module20\09_competition_protocol\main.py
roster = dict()
count = 0
number_of_protocols = int(input('Сколько записей вносится в протокол? '))
print('Записи (результат и имя):')
for number in range(1, number_of_protocols + 1):
    count += 1
    result_and_name = input(f'{number}-я запись: ').split()
    for name, score in roster.items():
        if result_and_name[1] == name and int(score[0]) >= int(result_and_name[0]):
            break
    else:
        roster[result_and_name[1]] = (int(result_and_name[0]), count)
# roster = {'Jack': (95715, 6), 'qwerty': (197128, 5), 'Alex': (95715, 3), 'M': (95715, 9)}
# Вторая часть задачи решена не в самом лучше свете, это то что пришло в голову...)
if len(roster) > 2:
    count_2 = 1
    print('Итоги соревнований:')
    win = max(roster.items())
    print(f'{count_2}-e место. {win[0]} {win[1][0]}', end='\n')
    roster.pop(win[0])
    winners = sorted(roster.items(), reverse=False)
    for number, key in enumerate(winners):
        count_2 += 1
        if number == 2:
            break
        else:
            print(f'{count_2}-e место. {key[0]} {key[1][0]}', end='\n')

else:
    print('Игроков не может быть меньше 3-ех!')

########################################
C:\Skillbox\Basic\Module20\10_my_zip\main.py
text = 'abcd'
set_number = (10, 20, 30, 40)

answer = ((text[index], set_number[index]) for index in range(min(len(text), len(set_number))))
print(answer)
for pairs in answer:
    print(pairs)

print('Все остальные виды ')
answer = [{text[index], set_number[index]} for index in range(min(len(text), len(set_number)))]
print(answer)

answer = [{text[index]: set_number[index]} for index in range(min(len(text), len(set_number)))]
print(answer)

answer = [(text[index], set_number[index]) for index in range(min(len(text), len(set_number)))]
print(answer)

answer = [[text[index], set_number[index]] for index in range(min(len(text), len(set_number)))]
print(answer)

zipped = dict(zip(text, set_number))
print(zipped)

zipped = set(zip(text, set_number))
print(zipped)

zipped = list(zip(text, set_number))
print(zipped)

########################################
C:\Skillbox\Basic\Module21\01_challenge_2\main.py
def outputs_the_numbers_in_order(first_number):
    if first_number == 0:
        return first_number
    else:
        outputs_the_numbers_in_order(first_number - 1)
        print(first_number)


number = int(input('Введите число:'))
outputs_the_numbers_in_order(number)

########################################
C:\Skillbox\Basic\Module21\02_my_zip_2\main.py
def do_zip_two(first_data, second_data):
    result = ((first_data[index], second_data[index]) for index in range(min(len(first_data), len(second_data))))
    return result


answer = do_zip_two(first_data=[{'h': 9}, 'b', 'v', 'u'], second_data=(30, {40, }, [90], 'p'))
print(answer) # Если раскрыть генератор, то-> [({'h': 9}, 30), ('b', {40}), ('v', [90]), ('u', 'p')]

########################################
C:\Skillbox\Basic\Module21\03_fibonacci\main.py
def counts_the_fibonacci_number(figure):
    if figure < 2:
        return figure
    else:
        return counts_the_fibonacci_number(figure - 1) + counts_the_fibonacci_number(figure - 2)


number = int(input('Введите позицию числа в ряде Фибоначчи: '))
result = counts_the_fibonacci_number(number)
print(f'Число: {result}')

########################################
C:\Skillbox\Basic\Module21\04_search_element_2\main.py

site = {
    'html': {
        'head': {
            'title': 'Мой сайт'
        },
        'body': {
            'h2': 'Здесь будет мой заголовок',
            'div': 'Тут, наверное, какой-то блок',
            'p': 'А вот здесь новый абзац'
        }
    }
}


def search_value(website, key, count_depth):
    if key in website:
        return website[key]
    for branch in website.values():
        count_depth -= 1
        if isinstance(branch, dict):
            result = search_value(branch, key, count_depth)
            if result and count_depth >= 1:
                break
    else:
        result = None
    return result


def input_data():
    the_desired_value = input('Искомый ключ: ')
    question_max_depth = input('Хотите ввести максимальную глубину? Y/N:').lower()
    if question_max_depth == 'n':
        answer = search_value(site, the_desired_value, 100)
        if answer:
            print(f'Значение ключа: {answer}')
        else:
            print('Такого ключа в структуре сайта нет')

    if question_max_depth == 'y':
        max_depth = int(input('Введите максимальную глубину:'))
        answer = search_value(site, the_desired_value, max_depth)
        if answer:
            print(f'Значение ключа: {answer}')
        else:
            print('Такого ключа в структуре сайта нет')


input_data()

########################################
C:\Skillbox\Basic\Module21\05_make_function_faster\main.py
def calculating_math_func(data, second_data, base=dict()):
    if second_data not in base:
        if data < second_data:
            for index in range(data, second_data + 1):
                data *= index
                base.update({index: (data / second_data ** 3) ** 10})
            data = second_data
            return base, data
    else:
        return [base[i] for i in range(data, second_data + 1)]


while True:
    first_number = int(input('Введите начальное число: '))
    finish_number = int(input('Введите конечное число: '))
    answer = calculating_math_func(first_number, finish_number)
    print(answer)

########################################
C:\Skillbox\Basic\Module21\06_deep_copy\main.py
import copy


def replacing_the_brand_name(copy_struct, brand):
    signboard = f'Сайт для {brand}: '
    copy_struct['html']['head']['title'] = f'Куплю/продам {brand} недорого'
    copy_struct['html']['body']['h2'] = f'У нас самая низкая цена на телефон {brand}'

    return signboard, copy_struct


site = {
    'html': {
        'head': {
            'title': 'Куплю/продам телефон недорого'
        },
        'body': {
            'h2': 'У нас самая низкая цена на телефон',
            'div': 'Купить',
            'p': 'Продать'
        }
    }
}

number_of_site = int(input('Сколько сайтов: '))
result = []
for _ in range(number_of_site):
    name_brand = input('\nВведите название продукта для нового сайта: ')
    copy_site = copy.deepcopy(site)
    answer = replacing_the_brand_name(copy_site, name_brand)
    result.append(answer)
    for index_result in result:
        print(f'\n{index_result}')

########################################
C:\Skillbox\Basic\Module21\07_advanced_sum\main.py
def advanced_sum_function(numbers_list, answer):
    if isinstance(numbers_list, tuple):
        answer = [number for number in numbers_list]
        return sum(answer)
    if isinstance(numbers_list, list):
        for number in numbers_list:
            if not isinstance(number, list):
                answer.append(number)
            advanced_sum_function(number, answer)
    return sum(answer)


tuple_numbers = advanced_sum_function((1, 2, 3, 4, 5), answer=[])
list_numbers = advanced_sum_function(([[1, 2, [3]], [1], 3]), answer=[])
print(tuple_numbers)
print(list_numbers)

########################################
C:\Skillbox\Basic\Module21\08_list_of_lists_2\main.py
roster = [1, 2, [3, 4], [[5, 6, 7], [8, 9, 10]],
          [[11, 12, 13], [14, 15], [16, 17, 18]]]


def advanced_sum_function_2(numbers_list, answer):
    if isinstance(numbers_list, list):
        for number in numbers_list:
            if not isinstance(number, list):
                answer.append(number)
            advanced_sum_function_2(number, answer)
    return answer


list_numbers = advanced_sum_function_2(roster, answer=[])
print(list_numbers)

########################################
C:\Skillbox\Basic\Module21\09_hanoi_towers\main.py
def the_hanoi_towers_algorithm(disks, start, finish):
    if disks <= 0:
        return
    temp = 6 - start - finish
    the_hanoi_towers_algorithm(disks - 1, start, temp)
    print(f'Переложить диск {disks} со стержня номер {start} на стержень номер {finish}')
    the_hanoi_towers_algorithm(disks - 1, temp, finish)


number_of_disks = int(input('Введите количество дисков: '))
the_hanoi_towers_algorithm(number_of_disks, 1, 3)

########################################
C:\Skillbox\Basic\Module22\01_nums_sum_2\main.py
numbers_file = open('numbers.txt', 'r')
summ_numbers = 0
print('Содержимое файла numbers.txt')

for symbol in numbers_file:
    print(symbol)
    for i_element in symbol:
        if i_element.isdigit():
            summ_numbers += int(i_element)

numbers_file.close()
answer = open('answer.txt', 'w')
answer.write(str(summ_numbers))
answer.close()
print('Содержимое файла answer.txt')
answer = open('answer.txt', 'r')
for result in answer:
    print(result)

########################################
C:\Skillbox\Basic\Module22\02_zen_of_python\main.py
file_zen = open('zen.txt', 'r')
roster = [word for word in file_zen]
print(roster[::-1])
file_zen.close()

########################################
C:\Skillbox\Basic\Module22\03_zen_of_python_2\main.py
import os
path = os.path.abspath(os.path.join('..', '02_zen_of_python', 'zen.txt'))
file_zen = open(path, 'r', encoding='utf8')


count_of_letter = 0
count_of_word = 0
data = []


for word in file_zen:
    summ_word = len(word.split(' '))
    count_of_word += int(summ_word)
    for letter in word:
        if letter.isalpha():
            data.append(letter.lower())


count = sorted([(data.count(letter), letter) for letter in data], reverse=False)
print(f'Количество букв в файле:', len(''.join(data)))
print(f'Количество cлов в файле: {count_of_word}')
file_zen = open(path, 'r', encoding='utf8')
print(f'Количество строк в файле: {len(list(file_zen))}')
print(f'Наиболее редкая буква: {count[0][1]}')
file_zen.close()
########################################
C:\Skillbox\Basic\Module22\04_files_and_folders\main.py
import os


#subdirectories = [directories for directories in os.listdir(address) if os.path.isdir(os.path.join('..', directories))]
# def func(repository):
#     for directories in os.listdir(repository):
#         if os.path.isfile(directories):
#             size = os.path.getsize(directories)
#             print('файл', directories)
#             print('весит', size)
#             return directories
#         else:
#             repository = os.path.abspath(os.path.join(directories))
#             print('репозитории', repository)
#             func(repository)


#print(f'Размер каталога (в Кб):{os.path.getsize(address) / 1024}') #верно ли?
#print(f'Количество подкаталогов: {len(subdirectories)}')

address = os.path.abspath(os.path.join('..'))
print(address)
# func(address)
########################################
C:\Skillbox\Basic\Module22\05_save\main.py
# TODO здесь писать код

########################################
C:\Skillbox\Basic\Module22\06_paranoia\main.py
# TODO здесь писать код

########################################
C:\Skillbox\Basic\Module22\07_tournament\main.py
# TODO здесь писать код

########################################
C:\Skillbox\Basic\Module22\08_frequency_analysis\main.py
# TODO здесь писать код

########################################
C:\Skillbox\Basic\Module22\09_war_and_peace\main.py
# TODO здесь писать код

########################################
C:\Skillbox\Basic\Module22\venv\Lib\site-packages\pip\_internal\cli\main.py
"""Primary application entrypoint.
"""
import locale
import logging
import os
import sys
from typing import List, Optional

from pip._internal.cli.autocompletion import autocomplete
from pip._internal.cli.main_parser import parse_command
from pip._internal.commands import create_command
from pip._internal.exceptions import PipError
from pip._internal.utils import deprecation

logger = logging.getLogger(__name__)


# Do not import and use main() directly! Using it directly is actively
# discouraged by pip's maintainers. The name, location and behavior of
# this function is subject to change, so calling it directly is not
# portable across different pip versions.

# In addition, running pip in-process is unsupported and unsafe. This is
# elaborated in detail at
# https://pip.pypa.io/en/stable/user_guide/#using-pip-from-your-program.
# That document also provides suggestions that should work for nearly
# all users that are considering importing and using main() directly.

# However, we know that certain users will still want to invoke pip
# in-process. If you understand and accept the implications of using pip
# in an unsupported manner, the best approach is to use runpy to avoid
# depending on the exact location of this entry point.

# The following example shows how to use runpy to invoke pip in that
# case:
#
#     sys.argv = ["pip", your, args, here]
#     runpy.run_module("pip", run_name="__main__")
#
# Note that this will exit the process after running, unlike a direct
# call to main. As it is not safe to do any processing after calling
# main, this should not be an issue in practice.


def main(args: Optional[List[str]] = None) -> int:
    if args is None:
        args = sys.argv[1:]

    # Configure our deprecation warnings to be sent through loggers
    deprecation.install_warning_logger()

    autocomplete()

    try:
        cmd_name, cmd_args = parse_command(args)
    except PipError as exc:
        sys.stderr.write(f"ERROR: {exc}")
        sys.stderr.write(os.linesep)
        sys.exit(1)

    # Needed for locale.getpreferredencoding(False) to work
    # in pip._internal.utils.encoding.auto_decode
    try:
        locale.setlocale(locale.LC_ALL, "")
    except locale.Error as e:
        # setlocale can apparently crash if locale are uninitialized
        logger.debug("Ignoring error %s when setting locale", e)
    command = create_command(cmd_name, isolated=("--isolated" in cmd_args))

    return command.main(cmd_args)

########################################
C:\Skillbox\Basic\Module22\venv\Lib\site-packages\pip\_internal\main.py
from typing import List, Optional


def main(args: Optional[List[str]] = None) -> int:
    """This is preserved for old console scripts that may still be referencing
    it.

    For additional details, see https://github.com/pypa/pip/issues/7498.
    """
    from pip._internal.utils.entrypoints import _wrapper

    return _wrapper(args)

########################################
C:\Skillbox\Basic\venv\Lib\site-packages\pip\_internal\cli\main.py
"""Primary application entrypoint.
"""
import locale
import logging
import os
import sys
from typing import List, Optional

from pip._internal.cli.autocompletion import autocomplete
from pip._internal.cli.main_parser import parse_command
from pip._internal.commands import create_command
from pip._internal.exceptions import PipError
from pip._internal.utils import deprecation

logger = logging.getLogger(__name__)


# Do not import and use main() directly! Using it directly is actively
# discouraged by pip's maintainers. The name, location and behavior of
# this function is subject to change, so calling it directly is not
# portable across different pip versions.

# In addition, running pip in-process is unsupported and unsafe. This is
# elaborated in detail at
# https://pip.pypa.io/en/stable/user_guide/#using-pip-from-your-program.
# That document also provides suggestions that should work for nearly
# all users that are considering importing and using main() directly.

# However, we know that certain users will still want to invoke pip
# in-process. If you understand and accept the implications of using pip
# in an unsupported manner, the best approach is to use runpy to avoid
# depending on the exact location of this entry point.

# The following example shows how to use runpy to invoke pip in that
# case:
#
#     sys.argv = ["pip", your, args, here]
#     runpy.run_module("pip", run_name="__main__")
#
# Note that this will exit the process after running, unlike a direct
# call to main. As it is not safe to do any processing after calling
# main, this should not be an issue in practice.


def main(args: Optional[List[str]] = None) -> int:
    if args is None:
        args = sys.argv[1:]

    # Configure our deprecation warnings to be sent through loggers
    deprecation.install_warning_logger()

    autocomplete()

    try:
        cmd_name, cmd_args = parse_command(args)
    except PipError as exc:
        sys.stderr.write(f"ERROR: {exc}")
        sys.stderr.write(os.linesep)
        sys.exit(1)

    # Needed for locale.getpreferredencoding(False) to work
    # in pip._internal.utils.encoding.auto_decode
    try:
        locale.setlocale(locale.LC_ALL, "")
    except locale.Error as e:
        # setlocale can apparently crash if locale are uninitialized
        logger.debug("Ignoring error %s when setting locale", e)
    command = create_command(cmd_name, isolated=("--isolated" in cmd_args))

    return command.main(cmd_args)

########################################
C:\Skillbox\Basic\venv\Lib\site-packages\pip\_internal\main.py
from typing import List, Optional


def main(args: Optional[List[str]] = None) -> int:
    """This is preserved for old console scripts that may still be referencing
    it.

    For additional details, see https://github.com/pypa/pip/issues/7498.
    """
    from pip._internal.utils.entrypoints import _wrapper

    return _wrapper(args)

########################################